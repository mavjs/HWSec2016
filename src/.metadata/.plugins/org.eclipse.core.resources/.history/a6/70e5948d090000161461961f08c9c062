package backend;

//import java.security.*;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.util.LinkedList;

import org.jmrtd.cert.CVCAuthorizationTemplate;
import org.jmrtd.cert.CVCPrincipal;
import org.jmrtd.cert.CVCertificateBuilder;;

public class Backend implements PublicKey, PrivateKey{
	
//	PrivateKey test = new PrivateKey();
	
	// Deze klasse aanroepen van de functies om wat mee te doen

	public Backend(){
	}
	

	// Setting the monthly allowance that will be distributed to all chargingterminals
	public short monthlyAllowance(){
		//Maybe perform a check if a terminal is a valid CT. 
		short allowance = 50; 	//Max. value is 32767 (inclusive).
		return allowance;
	}
	
	// Return list of revoked 
	public LinkedList<Integer> revokedLists(){
		LinkedList<Integer> list = new LinkedList<Integer>();
		return list;
	}
	
	public CardVerifiableCertificate void createCertificate() {
		CVCertificateBuilder caBuilder;
//		PublicKey pubkey = new PublicKey();
		PublicKey publicKey;
		PrivateKey privateKey;
		caBuilder = new CVCertificateBuilder();
		try {
			caBuilder.createCertificate(publicKey, privateKey, String algorithmName, CVCPrincipal caRef, CVCPrincipal holderRef, CVCAuthorizationTemplate authZTemplate, Date validFrom, Date validTo, String provider);
		} catch (Exception e){
			System.out.println("Error");
		}
	}

/*	
	public RSAKeyGen(){
		System.out.println("Generating RSA keys, please wait...");
		KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
		generator.initialize(1024);
		KeyPair keypair = generator.generateKeyPair();
		RSAPublicKey publickey = (RSAPublicKey)keypair.getPublic();
		RSAPrivateKey privatekey = (RSAPrivateKey)keypair.getPrivate();	
	}
	*/
//	public static CardVerifiableCertificate createCertificate(){
		
//	} //certificateCreation(){
		//CVCertificateBuilder cabuilder = new CVCertificateBuilder();

}
